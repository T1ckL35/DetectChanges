
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    paths: 
       - 'modules/**'

jobs:
  get_files:
    name: run_on_pr_or_push
    runs-on: ubuntu-latest
    # To add in at some point
    # if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: List changed files
        run: |
            for file in ${{ steps.changed-files.outputs.changed_files }}; do
                echo "$file was changed"
            done
      - name: Zip top-level folders with their contents
        run: |
            echo ${{ steps.changed-files.outputs.changed_files }} | while read line ; do xargs zip archive.zip $line ; done
      - name: Extract some files
        run: |
            # unzip to test folder (might need to create it?)
            7z x archive.zip -otest
            ls
            cd test
            ls -la
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Run a python script inline
        shell: python
        run: |
          import os
          import sys

          print(os.getcwd())
          print("Hello world!")
          sys.exit()
      - name: Run script
        run: python3 .github/scripts/test.py "${{ steps.changed-files.outputs.changed_files }}"


# on:
#   pull_request:
#     branches: [ main ]
#   push:
#     branches: [ main ]

# jobs:
#   get_files:
#     name: run_on_pr_or_push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Modified files
#         run: |
#           case '${{ github.event_name }}' in
#             push)
#               firstCommit='${{ github.event.commits[0].id }}'
#               lastCommit='${{ github.event.commits[-1].id }}'
#               ;;
#             pull_request)
#               firstCommit='${{ github.event.base_ref }}'
#               lastCommit='${{ github.event.head_ref }}'
#               ;;
#           esac
#           changedFiles=$(git diff --name-only --diff-filter=d "${firstCommit}~1" "${lastCommit}")
#           echo "changedFiles: $changedFiles"






# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v4

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
